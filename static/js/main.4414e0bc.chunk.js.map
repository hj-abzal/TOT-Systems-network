{"version":3,"sources":["features/authorization/Login/Login.module.css","features/ProfilePage/ProfilePage.module.css","components/PageLinks/PageLinks.module.css","features/Chats/TalkChat/talkChatReducer.ts","features/Chats/WorkChat/workChatReducer.ts","features/Notes/notesReducer.ts","features/authorization/Registration/registReducer.ts","features/ProfilePage/profilePageReducer.ts","assets/user.png","features/authorization/Login/loginReducer.ts","features/ProfilePage/ProfileInfo/ProfileInfo.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Notes/Note/UserNote.tsx","features/Notes/userNotes.tsx","features/ProfilePage/ProfilePage.tsx","components/Message/MessageItem.tsx","features/Chats/data.ts","features/Chats/TalkChat/TalkChat.tsx","features/Chats/WorkChat/WorkChat.tsx","features/Chats/Chats.tsx","App/Main/Main.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/authorization/Login/Login.tsx","features/authorization/Registration/Registration.tsx","features/ProfilePage/EditProfileInfo/EditProfileInfo.tsx","components/Redirect/AuthRedirect.tsx","components/routes/Pages.tsx","components/PageLinks/PageLinks.tsx","components/routes/Routes.tsx","components/dev-header/DevHeader.tsx","App/App.tsx","config.ts","reportWebVitals.ts","App/store.ts","utils/localStorage.ts","index.tsx","components/Message/MessageItem.module.css","features/ProfilePage/EditProfileInfo/EditProfileInfo.module.css","features/authorization/Registration/Registration.module.css","features/Chats/Chats.module.css","features/ProfilePage/ProfileInfo/ProfileInfo.module.css","features/Notes/Note/UserNote.module.css","features/Chats/TalkChat/TalkChat.module.css","features/Chats/WorkChat/WorkChat.module.css","features/Notes/UserNotes.module.css","App/Main/Main.module.css"],"names":["module","exports","initialState","talkChatReducerActions","ADD_USER_CHAT","SEND_MESSAGE","UPDATE_MESSAGE","DELETE_MESSAGE","workChatReducerActions","notesReducerActions","ADD_USER_NOTE","UPDATE_USER_NOTE","ADD_NOTE","DELETE_NOTE","CHANGE_NOTE_COLOR","updateUserNote","userId","noteId","title","text","type","registeredUsers","registReducerActions","ADD_REGISTERED_USER","UPDATE_REGISTERED_USER","addUser","firstName","lastName","email","password","dispatch","payload","id","Date","now","addUserProfile","addUserChatTalk","addUserChatWork","editMode","profilePageReducerActions","ADD_USER_PROFILE","SER_EDIT_MODE","UPDATE_PROFILE","setEditModeProfile","edit","updateUserProfile","updateProfile","updateRegistredUser","isLoggedIn","loggedId","validation","loginReducerActions","SET_IS_LOGGED_IN","SET_LOGIN_VALIDATION","LOG_OUT","logOut","setValidation","LogIn","getState","value","user","registration","find","u","undefined","ProfileInfo","profileInfo","setEditMode","userImg","imgUrl","userPng","useDispatch","className","s","wrapper","userPhoto","src","Button","size","variant","color","onClick","userName","status","AddItemForm","React","memo","addItem","disabled","multiline","inputStyle","useState","setTitle","error","setError","addItemHandler","trimmed","trim","length","onChangeHandler","e","currentTarget","onKeyPressHandler","charCode","TextField","onChange","onKeyPress","label","helperText","IconButton","SendRounded","fontSize","AddBox","EditableSpan","props","autoFocus","onBlur","onDoubleClick","bold","UserNote","selectedColor","setSelectedColor","visible","setVisible","hide","changeNoteColor","container","item","style","backgroundColor","udatedTitle","updatedText","buttons","deleteNote","Delete","onClickOutside","interactive","placement","content","UserNotes","userNote","addNote","noteItems","map","n","ProfilePage","useSelector","state","profile","to","PATH","EDIT_PROFILE","MessageItem","message","name","time","me","editAble","messageId","myMessage","deleteMessageTalk","updateMessageTalk","avatar","alt","angle","workChatData","url","TalkChat","userTalkChat","scroll","useRef","useEffect","current","scrollIntoView","behavior","m","ref","footer","toTimeString","slice","sendMessageTalk","divWrapper","messageInput","WorkChat","userWorkChat","sendMessageWork","Chats","header","chatBtn","choosedBtn","Main","login","users","usersNotes","notes","userWorkChats","workChat","userTalkChats","talkChat","chats","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","MAIN","handleSubmit","REGISTER","margin","getFieldProps","errorStyle","touched","Registration","passwordCheck","checkEmail","console","log","linkButton","LOGIN","textField","EditProfileInfo","setUrl","localStorage","getItem","userPhotoBlock","accept","target","files","file","reader","FileReader","addEventListener","setItem","result","readAsDataURL","uploader","AuthRedirect","children","restProps","pages","_id","path","exact","page","PageLinks","info","link","mappedRoutes","p","params","render","Routes","App","Helmet","charSet","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","serializedState","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","saveState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4414e0bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorStyle\":\"Login_errorStyle__25Wa2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfilePage_wrapper__fmrTf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"PageLinks_link__2aEvz\"};","import { AppStateType, store } from '../../../App/store'\r\nimport { Dispatch } from 'redux'\r\nimport { RegisteredUserType } from '../../authorization/Registration/registReducer'\r\nimport { MessageType, WorkChatStateType } from '../WorkChat/workChatReducer'\r\n\r\nconst initialState = {}\r\n\r\nexport const talkChatReducer = (\r\n  state: WorkChatStateType = initialState,\r\n  action: TalkChatReducerActionTypes\r\n): WorkChatStateType => {\r\n  switch (action.type) {\r\n    case talkChatReducerActions.ADD_USER_CHAT:\r\n      return {\r\n        ...state,\r\n        [action.userId]: [],\r\n      }\r\n    case talkChatReducerActions.SEND_MESSAGE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: [...state[action.userId], { ...action.payload }],\r\n      }\r\n    case talkChatReducerActions.DELETE_MESSAGE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: state[action.userId].filter(\r\n          m => m.id !== action.messageId\r\n        ),\r\n      }\r\n    case talkChatReducerActions.UPDATE_MESSAGE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: state[action.userId].map(m =>\r\n          m.id === action.messageId ? { ...m, text: action.text } : m\r\n        ),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst talkChatReducerActions = {\r\n  ADD_USER_CHAT: 'talkChat/ADD_USER_CHAT',\r\n  SEND_MESSAGE: 'talkChat/SEND_MESSAGE',\r\n  UPDATE_MESSAGE: 'talkChat/UPDATE_MESSAGE',\r\n  DELETE_MESSAGE: 'talkChat/DELETE_MESSAGE',\r\n} as const\r\n\r\nexport const addUserChatTalk = (userId: number) => {\r\n  return {\r\n    type: talkChatReducerActions.ADD_USER_CHAT,\r\n    userId,\r\n  } as const\r\n}\r\n\r\nexport const sendMessageTalk = (userId: number, text: string) => {\r\n  let id = Date.now()\r\n  const time = new Date().toTimeString().slice(0, 5)\r\n  let payload: MessageType = { id, text, time }\r\n  return {\r\n    type: talkChatReducerActions.SEND_MESSAGE,\r\n    userId,\r\n    payload,\r\n  } as const\r\n}\r\n\r\nexport const deleteMessageTalk = (userId: number, messageId: number) => {\r\n  return {\r\n    type: talkChatReducerActions.DELETE_MESSAGE,\r\n    userId,\r\n    messageId,\r\n  } as const\r\n}\r\n\r\nexport const updateMessageTalk = (\r\n  userId: number,\r\n  messageId: number,\r\n  text: string\r\n) => {\r\n  return {\r\n    type: talkChatReducerActions.UPDATE_MESSAGE,\r\n    userId,\r\n    messageId,\r\n    text,\r\n  } as const\r\n}\r\n// types\r\nexport type TalkChatReducerActionTypes =\r\n  | ReturnType<typeof addUserChatTalk>\r\n  | ReturnType<typeof sendMessageTalk>\r\n  | ReturnType<typeof deleteMessageTalk>\r\n  | ReturnType<typeof updateMessageTalk>\r\n\r\n","import { AppStateType, store } from './../../../App/store'\r\nimport { Dispatch } from 'redux'\r\nimport { RegisteredUserType } from '../../authorization/Registration/registReducer'\r\n\r\nconst initialState = {}\r\n\r\nexport const workChatReducer = (\r\n  state: WorkChatStateType = initialState,\r\n  action: WorkChatReducerActionTypes\r\n): WorkChatStateType => {\r\n  switch (action.type) {\r\n    case workChatReducerActions.ADD_USER_CHAT:\r\n      return {\r\n        ...state,\r\n        [action.userId]: [],\r\n      }\r\n    case workChatReducerActions.SEND_MESSAGE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: [...state[action.userId], { ...action.payload }],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst workChatReducerActions = {\r\n  ADD_USER_CHAT: 'workChat/ADD_USER_CHAT',\r\n  SEND_MESSAGE: 'workChat/SEND_MESSAGE',\r\n} as const\r\n\r\nexport const addUserChatWork = (userId: number) => {\r\n  return {\r\n    type: workChatReducerActions.ADD_USER_CHAT,\r\n    userId,\r\n  } as const\r\n}\r\n\r\nexport const sendMessageWork = (userId: number, text: string) => {\r\n  let id = Date.now()\r\n  const time = new Date().toTimeString().slice(0, 5)\r\n  let payload: MessageType = { id, text, time }\r\n  return {\r\n    type: workChatReducerActions.SEND_MESSAGE,\r\n    userId,\r\n    payload,\r\n  } as const\r\n}\r\n\r\n\r\n// types\r\nexport type WorkChatReducerActionTypes =\r\n  | ReturnType<typeof addUserChatWork>\r\n  | ReturnType<typeof sendMessageWork>\r\n\r\nexport type WorkChatStateType = {\r\n  [key: number]: MessageType[]\r\n}\r\nexport type MessageType = {\r\n  id: number\r\n  text: string\r\n  time: string\r\n}\r\n\r\n","import { Dispatch } from 'redux'\r\nimport { RegisteredUserType } from '../authorization/Registration/registReducer'\r\n\r\nconst initialState = {}\r\n\r\nexport const notesReducer = (\r\n  state: UsersNotesType = initialState,\r\n  action: NotesReducerActionTypes\r\n): UsersNotesType => {\r\n  switch (action.type) {\r\n    case notesReducerActions.ADD_USER_NOTE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: [\r\n          {\r\n            id: 0,\r\n            title: 'Первая заметка',\r\n            text: 'Нажмите дважды  на заголовок или текст для режима радектирования',\r\n            color: '#b5c3fa',\r\n          },\r\n        ],\r\n      }\r\n    case notesReducerActions.UPDATE_USER_NOTE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: state[action.userId].map(n =>\r\n          n.id === action.noteId\r\n            ? { ...n, title: action.title, text: action.text }\r\n            : n\r\n        ),\r\n      }\r\n    case notesReducerActions.ADD_NOTE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: [\r\n          {\r\n            ...action.payload,\r\n            text: 'Нажмите дважды  на заголовок или текст для режима радaктирования',\r\n          },\r\n          ...state[action.userId],\r\n        ],\r\n      }\r\n    case notesReducerActions.DELETE_NOTE:\r\n      return {\r\n        ...state,\r\n        [action.userId]: state[action.userId].filter(\r\n          n => n.id !== action.noteId\r\n        ),\r\n      }\r\n    case notesReducerActions.CHANGE_NOTE_COLOR:\r\n      return {\r\n        ...state,\r\n        [action.userId]: state[action.userId].map(n =>\r\n          n.id === action.noteId ? { ...n, color: action.color } : n\r\n        ),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst notesReducerActions = {\r\n  ADD_USER_NOTE: 'notes/ADD_USER_NOTE',\r\n  UPDATE_USER_NOTE: 'notes/UPDATE_USER_NOTE',\r\n  ADD_NOTE: 'notes/ADD_NOTE',\r\n  DELETE_NOTE: 'notes/DELETE_NOTE',\r\n  CHANGE_NOTE_COLOR: 'notes/CHANGE_NOTE_COLOR',\r\n} as const\r\n\r\nexport const addUserNote = (userId: number) => {\r\n  return {\r\n    type: notesReducerActions.ADD_USER_NOTE,\r\n    userId,\r\n  } as const\r\n}\r\n\r\nexport const updateUserNote = (\r\n  userId: number,\r\n  noteId: number,\r\n  title: string,\r\n  text: string\r\n) => {\r\n  return {\r\n    type: notesReducerActions.UPDATE_USER_NOTE,\r\n    userId,\r\n    noteId,\r\n    title,\r\n    text,\r\n  } as const\r\n}\r\n\r\nexport const addNote = (userId: number, title: string) => {\r\n  let id = Date.now()\r\n  let payload = { id, title, color: '#b5c3fa' }\r\n  return {\r\n    type: notesReducerActions.ADD_NOTE,\r\n    userId,\r\n    payload,\r\n  } as const\r\n}\r\n\r\nexport const deleteNote = (userId: number, noteId: number) => {\r\n  return {\r\n    type: notesReducerActions.DELETE_NOTE,\r\n    userId,\r\n    noteId,\r\n  } as const\r\n}\r\n\r\nexport const changeNoteColor = (\r\n  userId: number,\r\n  noteId: number,\r\n  color: string\r\n) => {\r\n  return {\r\n    type: notesReducerActions.CHANGE_NOTE_COLOR,\r\n    userId,\r\n    noteId,\r\n    color,\r\n  } as const\r\n}\r\n// types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type NotesReducerActionTypes =\r\n  | ReturnType<typeof addUserNote>\r\n  | ReturnType<typeof updateUserNote>\r\n  | ReturnType<typeof addNote>\r\n  | ReturnType<typeof deleteNote>\r\n  | ReturnType<typeof changeNoteColor>\r\n\r\nexport type UsersNotesType = {\r\n  [key: number]: NotesType[]\r\n}\r\nexport type NotesType = {\r\n  id: number\r\n  title: string\r\n  text: string\r\n  color: string\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { addUserChatTalk } from '../../Chats/TalkChat/talkChatReducer'\r\nimport { addUserChatWork } from '../../Chats/WorkChat/workChatReducer'\r\nimport { addUserNote } from '../../Notes/notesReducer'\r\nimport {\r\n  addUserProfile,\r\n} from '../../ProfilePage/profilePageReducer'\r\n\r\nconst initialState = {\r\n  registeredUsers: [] as RegisteredUserType[],\r\n}\r\n\r\nexport const registReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: RegistReducerActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case registReducerActions.ADD_REGISTERED_USER:\r\n      return {\r\n        ...state,\r\n        registeredUsers: [...state.registeredUsers, action.payload],\r\n      }\r\n    case registReducerActions.UPDATE_REGISTERED_USER:\r\n      return {\r\n        ...state,\r\n        registeredUsers: state.registeredUsers.map(u =>\r\n          u.id === action.payload.id ? { ...u, ...action.payload } : u\r\n        ),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst registReducerActions = {\r\n  ADD_REGISTERED_USER: 'reg/ADD_REGISTERED_USER',\r\n  UPDATE_REGISTERED_USER: 'reg/UPDATE_REGISTERED_USER',\r\n} as const\r\n\r\nexport const addRegisteredUser = (payload: RegisteredUserType) => {\r\n  return {\r\n    type: registReducerActions.ADD_REGISTERED_USER,\r\n    payload,\r\n  } as const\r\n}\r\n\r\nexport const updateRegistredUser = (\r\n  id: number,\r\n  firstName: string,\r\n  lastName: string,\r\n  email: string\r\n) => {\r\n  return {\r\n    type: registReducerActions.UPDATE_REGISTERED_USER,\r\n    payload: { id, firstName, lastName, email },\r\n  } as const\r\n}\r\n//\r\nexport const addUser =\r\n  (firstName: string, lastName: string, email: string, password: string) =>\r\n  (dispatch: Dispatch) => {\r\n    let id = Date.now()\r\n    dispatch(addRegisteredUser({ id, firstName, lastName, email, password }))\r\n    dispatch(addUserProfile({ id, firstName, lastName, email, password }))\r\n    dispatch(addUserNote(id))\r\n    dispatch(addUserChatTalk(id))\r\n    dispatch(addUserChatWork(id))\r\n  }\r\n// types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type RegistReducerActionTypes =\r\n  | ReturnType<typeof addRegisteredUser>\r\n  | ReturnType<typeof updateRegistredUser>\r\n\r\nexport type RegisteredUserType = {\r\n  id: number\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  password: string\r\n}\r\n","import {\r\n  RegistReducerActionTypes,\r\n  updateRegistredUser,\r\n} from './../authorization/Registration/registReducer'\r\nimport { Dispatch } from 'redux'\r\nimport { RegisteredUserType } from '../authorization/Registration/registReducer'\r\n\r\nconst initialState = {\r\n  editMode: false,\r\n}\r\n\r\nexport const profilePageReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ProfilePageReducerActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case profilePageReducerActions.ADD_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        [action.payload.id]: {\r\n          profileInfo: {\r\n            imgUrl: '',\r\n            status: 'Всем пивет! Я пользуюсь Planktonics messanger.',\r\n            ...action.payload,\r\n          },\r\n        },\r\n      }\r\n    case profilePageReducerActions.SER_EDIT_MODE:\r\n      return {\r\n        ...state,\r\n        editMode: action.edit,\r\n      }\r\n    case profilePageReducerActions.UPDATE_PROFILE:\r\n      return {\r\n        ...state,\r\n        [action.payload.id]: {\r\n          profileInfo: { ...action.payload },\r\n        },\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst profilePageReducerActions = {\r\n  ADD_USER_PROFILE: 'profile/ADD_USER_PROFILE',\r\n  SER_EDIT_MODE: 'profile/SER_EDIT_MODE',\r\n  UPDATE_PROFILE: '/profile/UPDATE_PROFILE',\r\n} as const\r\n\r\nexport const addUserProfile = (payload: RegisteredUserType) => {\r\n  return {\r\n    type: profilePageReducerActions.ADD_USER_PROFILE,\r\n    payload,\r\n  } as const\r\n}\r\nexport const setEditModeProfile = (edit: boolean) => {\r\n  return {\r\n    type: profilePageReducerActions.SER_EDIT_MODE,\r\n    edit,\r\n  } as const\r\n}\r\nexport const updateProfile = (payload: ProfileInfoType) => {\r\n  return {\r\n    type: profilePageReducerActions.UPDATE_PROFILE,\r\n    payload,\r\n  } as const\r\n}\r\n//thunks\r\n\r\nexport const updateUserProfile =\r\n  (payload: ProfileInfoType) =>\r\n  (\r\n    dispatch: Dispatch<ProfilePageReducerActionTypes | RegistReducerActionTypes>\r\n  ) => {\r\n    let { id, firstName, lastName, email } = payload\r\n    dispatch(updateProfile(payload))\r\n    dispatch(updateRegistredUser(id, firstName, lastName, email))\r\n  }\r\n// types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type ProfilePageReducerActionTypes =\r\n  | ReturnType<typeof addUserProfile>\r\n  | ReturnType<typeof setEditModeProfile>\r\n  | ReturnType<typeof updateProfile>\r\n\r\nexport type UsersProfileType = {\r\n  [key: number]: ProfileType\r\n}\r\nexport type ProfileType = {\r\n  profileInfo: ProfileInfoType\r\n}\r\n\r\nexport type ProfileInfoType = {\r\n  id: number\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  status: string\r\n  imgUrl: string\r\n}\r\nexport type MyNotesType = {\r\n  id: string\r\n  title: string\r\n  text: string\r\n}\r\n","export default __webpack_public_path__ + \"static/media/user.07073b35.png\";","import { GetAppStateType } from './../../../App/store'\r\nimport { Dispatch } from 'redux'\r\nimport { act } from 'react-dom/test-utils'\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  loggedId: 0,\r\n  validation: '' as string | null,\r\n}\r\n\r\nexport const loginReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: LoginReducerActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case loginReducerActions.SET_IS_LOGGED_IN:\r\n      return {\r\n        ...state,\r\n        loggedId: action.id,\r\n        isLoggedIn: action.value,\r\n      }\r\n    case loginReducerActions.SET_LOGIN_VALIDATION:\r\n      return {\r\n        ...state,\r\n        validation: action.validation,\r\n      }\r\n    case loginReducerActions.LOG_OUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        loggedId: 0,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst loginReducerActions = {\r\n  SET_IS_LOGGED_IN: 'login/SET_IS_LOGGED_IN',\r\n  SET_LOGIN_VALIDATION: 'login/SET_LOGIN_VALIDATION',\r\n  LOG_OUT: 'login/LOG_OUT',\r\n} as const\r\n\r\nexport const setIsLoggedIn = (id: number, value: boolean) =>\r\n  ({ type: loginReducerActions.SET_IS_LOGGED_IN, id, value } as const)\r\n\r\nexport const logOut = () => ({ type: loginReducerActions.LOG_OUT } as const)\r\n\r\nexport const setValidation = (validation: string | null) =>\r\n  ({ type: loginReducerActions.SET_LOGIN_VALIDATION, validation } as const)\r\n//thunks\r\n\r\nexport const LogIn =\r\n  (email: string, password: string) =>\r\n  (dispatch: Dispatch<LoginReducerActionTypes>, getState: GetAppStateType) => {\r\n    const registeredUsers = getState().registration.registeredUsers\r\n    let user = registeredUsers.find(\r\n      u => u.email === email && u.password === password\r\n    )\r\n    if (user !== undefined) {\r\n      dispatch(setIsLoggedIn(user.id, true))\r\n    } else {\r\n      dispatch(setValidation('Не правильный адрес почты или пароль'))\r\n    }\r\n  }\r\n\r\n// types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type LoginReducerActionTypes =\r\n  | ReturnType<typeof setIsLoggedIn>\r\n  | ReturnType<typeof setValidation>\r\n  | ReturnType<typeof logOut>\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport userPng from '../../../assets/user.png'\r\nimport s from './ProfileInfo.module.css'\r\nimport Button from '@material-ui/core/Button'\r\nimport { ProfileInfoType } from '../profilePageReducer'\r\nimport { logOut } from '../../authorization/Login/loginReducer'\r\n\r\ntype ProfileInfoPropsType = {\r\n    profileInfo: ProfileInfoType\r\n    setEditMode: () => void\r\n}\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({ profileInfo, setEditMode }) => {\r\n    const userImg = profileInfo.imgUrl ? profileInfo.imgUrl : userPng\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => {\r\n        dispatch(logOut())\r\n    }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.user}>\r\n                <img className={s.userPhoto} src={userImg} />\r\n                <Button\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={onClickHandler}\r\n                >выйти</Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={() => setEditMode()}\r\n\r\n                >редактировать</Button>\r\n            </div>\r\n            <div className={s.profileInfo} >\r\n                <div>\r\n                    <b className={s.userName} >{profileInfo.firstName + ' ' + profileInfo.lastName}</b>\r\n                </div>\r\n                <div>\r\n                    <b>почта: </b>{profileInfo.email}\r\n                </div>\r\n                <div>\r\n                    <b>status: </b> {profileInfo.status}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox, SendRounded } from '@material-ui/icons';\r\nimport Tippy from '@tippyjs/react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n    multiline?: boolean\r\n    className?: string\r\n    inputStyle?: string\r\n\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (\r\n    {\r\n        addItem, disabled = false, multiline, className, inputStyle\r\n    }: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n    \r\n    const addItemHandler = () => {\r\n        let trimmed = title.trim()\r\n        if (trimmed.length < 50) {\r\n            if (trimmed !== \"\") {\r\n                addItem(title);\r\n                setTitle(\"\");\r\n            } else {\r\n                setError(\"введите текст\");\r\n            }\r\n        } else {\r\n            setError(\"превышает максимальное значение 50\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {\r\n            multiline ? <div className={className}>\r\n                \r\n                <TextField\r\n                    className={inputStyle}\r\n                    variant=\"filled\"\r\n                    multiline\r\n                    disabled={disabled}\r\n                    error={!!error}\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    label=\"Текст\"\r\n                    helperText={error}\r\n                />\r\n\r\n                <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n                    <SendRounded fontSize={\"large\"} />\r\n                </IconButton>\r\n            </div>\r\n                : <div className={className}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        className={className}\r\n                        disabled={disabled}\r\n                        error={!!error}\r\n                        value={title}\r\n                        onChange={onChangeHandler}\r\n                        onKeyPress={onKeyPressHandler}\r\n                        label=\"Текст\"\r\n                        helperText={error}\r\n                    />\r\n                    <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n                        <AddBox />\r\n                    </IconButton>\r\n                </div>\r\n\r\n        }\r\n\r\n\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    bold?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        addItemHandler()\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        let trimmed = title.trim()\r\n        if (trimmed.length < 100) {\r\n            if (trimmed !== \"\") {\r\n                setEditMode(false);\r\n                props.onChange(title);\r\n            } else {\r\n                setError(\"введите текст\");\r\n            }\r\n        } else {\r\n            setError(\"превышает максимальное значение\");\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            onChange={changeTitle}\r\n            autoFocus onBlur={activateViewMode}\r\n            onKeyPress={onKeyPressHandler}\r\n            helperText={error}\r\n        />\r\n        : <span onDoubleClick={activateEditMode}> {props.bold ? <b>{props.value}</b> : props.value}</span>\r\n});\r\n","import { IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\r\nimport { changeNoteColor, deleteNote, updateUserNote } from '../notesReducer';\r\nimport s from './UserNote.module.css'\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport Tippy from '@tippyjs/react';\r\nimport { HexColorPicker } from \"react-colorful\";\r\n\r\ntype UserNotePropsType = {\r\n    userId: number\r\n    noteId: number\r\n    title: string\r\n    text: string\r\n    color: string\r\n}\r\n\r\nexport const UserNote: React.FC<UserNotePropsType> = ({ userId, noteId, title, text, color }) => {\r\n    const [selectedColor, setSelectedColor] = useState(color)\r\n    const [visible, setVisible] = useState(false);\r\n    const show = () => setVisible(true);\r\n    const hide = () => {\r\n        dispatch(changeNoteColor(userId, noteId, selectedColor))\r\n        setVisible(false)\r\n    }\r\n    const dispatch = useDispatch()\r\n    const onUpdateNoteTitle = (udatedTitle: string) => {\r\n        dispatch(updateUserNote(userId, noteId, udatedTitle, text))\r\n    }\r\n    const onUpdateNoteText = (updatedText: string) => {\r\n        dispatch(updateUserNote(userId, noteId, title, updatedText))\r\n    }\r\n    const onDeleteNote = () => {\r\n        dispatch(deleteNote(userId, noteId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.container}>\r\n                <div className={s.item} style={{ backgroundColor: selectedColor }}>\r\n                    <div className={s.title}>\r\n                        <EditableSpan value={title} onChange={onUpdateNoteTitle} bold />\r\n                    </div>\r\n                    <div className={s.text}>\r\n                        <EditableSpan value={text} onChange={onUpdateNoteText} />\r\n                    </div>\r\n                    <div className={s.buttons}>\r\n                        <IconButton onClick={onDeleteNote}>\r\n                            <Delete fontSize=\"small\" />\r\n                        </IconButton>\r\n                        <Tippy visible={visible} onClickOutside={hide} interactive={true} placement={'bottom'} content={\r\n                            <HexColorPicker color={selectedColor} onChange={setSelectedColor} />\r\n                        }>\r\n                            <IconButton onClick={visible ? hide : show}>\r\n                                <PaletteIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tippy>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// <BlockPicker color={selectedColor}\r\n// onChangeComplete={color => setSelectedColor(color.hex)\r\n//     />","import Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\r\nimport { UserNote } from './Note/UserNote';\r\nimport { addNote, NotesType } from './notesReducer';\r\nimport s from './UserNotes.module.css'\r\n\r\ntype UserNotesPropsType = {\r\n    userNote: NotesType[]\r\n    userId: number\r\n}\r\n\r\nexport const UserNotes: React.FC<UserNotesPropsType> = ({ userNote, userId }) => {\r\n    const dispatch = useDispatch()\r\n    const onAddNote = (title: string) => {\r\n        dispatch(addNote(userId, title))\r\n    }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div>\r\n                <b className={s.title}>Заметки</b>\r\n                <AddItemForm addItem={onAddNote} className={s.inputStyle} />\r\n            </div>\r\n            <div className={s.noteItems}>\r\n                {\r\n                    userNote.map(n => {\r\n                        return <UserNote\r\n                            key={n.id}\r\n                            userId={userId}\r\n                            noteId={n.id}\r\n                            title={n.title}\r\n                            text={n.text}\r\n                            color={n.color}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../App/store'\r\nimport { ProfileInfoType, setEditModeProfile } from './profilePageReducer'\r\nimport s from './ProfilePage.module.css'\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { PATH } from '../../components/routes/Pages'\r\nimport { UserNotes } from '../Notes/userNotes'\r\nimport { NotesType } from '../Notes/notesReducer'\r\n\r\ntype ProfilePagePropsType = {\r\n    user: ProfileInfoType\r\n    userNote: NotesType[]\r\n    userId: number\r\n}\r\nexport const ProfilePage: React.FC<ProfilePagePropsType> = ({ user, userNote, userId }) => {\r\n    const editMode = useSelector<AppStateType, boolean>(state => state.profile.editMode)\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => dispatch(setEditModeProfile(true))\r\n    if (editMode) {\r\n        return <Redirect to={PATH.EDIT_PROFILE} />\r\n    }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            {\r\n                !editMode && <ProfileInfo profileInfo={user} setEditMode={onClickHandler} />\r\n            }\r\n            <UserNotes userNote={userNote} userId={userId} />\r\n        </div>\r\n    )\r\n}","import { IconButton } from '@material-ui/core';\nimport React, { useState } from 'react'\nimport s from './MessageItem.module.css'\nimport userPng from '../../assets/user.png'\nimport { Delete } from '@material-ui/icons';\nimport Tippy from '@tippyjs/react';\nimport { EditableSpan } from '../EditableSpan/EditableSpan';\nimport { useDispatch } from 'react-redux';\nimport { deleteMessageTalk, updateMessageTalk } from '../../features/Chats/TalkChat/talkChatReducer';\n\ntype MessagePropsType = {\n    message: string\n    name: string\n    time: string\n    userPhoto: string\n    me?: boolean\n    editAble?: boolean\n    userId: number\n    messageId: number\n}\nexport const MessageItem: React.FC<MessagePropsType> = ({\n    message,\n    name,\n    time,\n    userPhoto,\n    me,\n    editAble,\n    userId,\n    messageId,\n    ...restPprops\n}) => {\n    const dispatch = useDispatch()\n    const onDeleteNote = () => {\n        dispatch(deleteMessageTalk(userId, messageId))\n    }\n    const onChange = (text: string) => {\n        dispatch(updateMessageTalk(userId, messageId, text))\n    }\n\n    return (\n        <div>\n            {\n                me\n                    ? <div className={s.myMessage}>\n                        <Tippy interactive={true} placement={'left'} content={\n                            editAble && <IconButton onClick={onDeleteNote}>\n                                <Delete fontSize=\"small\" />\n                            </IconButton>\n                        }>\n                            <div className={s.item}>\n                                <div className={s.name} ><b>{name}</b></div>\n                                {\n                                    editAble ? <EditableSpan value={message} onChange={onChange} />\n                                        : <div className={s.text} >{message} </div>\n                                }\n\n                                <div className={s.time} >{time}</div>\n                            </div>\n                        </Tippy>\n                        <img className={s.avatar} src={userPhoto ? userPhoto : userPng} alt=\"avatar\" />\n                    </div>\n                    : <div className={s.message}>\n                        <img className={s.avatar} src={userPhoto ? userPhoto : userPng} alt=\"avatar\" />\n                        <div className={s.angle}></div>\n                        <div className={s.item}>\n                            <div className={s.name} ><b>{name}</b></div>\n                            <div className={s.text} >{message} </div>\n                            <div className={s.time} >{time}</div>\n                        </div>\n                    </div>\n            }\n\n        </div>\n    )\n}\n\n\n","import { AppStateType, store } from '../../App/store'\r\n\r\n// const whoIsUser = (state: AppStateType) => {\r\n//     let id = state.login.loggedId\r\n//     let user = state.registration.registeredUsers[id]\r\n//     return user\r\n//   }\r\n//   let user =\r\n//     whoIsUser(store.getState()).firstName +\r\n//     ' ' +\r\n//     whoIsUser(store.getState()).lastName\r\nexport const workChatData = [\r\n  {\r\n    id: 0,\r\n    text: 'Всем доброго дня! Дорогие коллеги, теперь у нас есть свой месенджер для общения и ведения работы совместно.',\r\n    time: '10:15',\r\n    name: 'Василий Иванович',\r\n    url: 'http://www.metalinfo.ru/ru/news/113017_big.jpg',\r\n  },\r\n  {\r\n    id: 1,\r\n    text: 'Спасибо! Таск №125562 выполнена.',\r\n    time: '10:22',\r\n    name: 'Варвара Щербакова',\r\n    url: 'https://robohash.org/3caa555327de23dd0c01e093a1fa5e36?set=set4&bgset=&size=400x400',\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Дорогие коллеги! Объявление! С переходом на этот месенджер удаляем все остальные рабочие чаты из дригих приложении и пользуемся только тут. Все услышали?',\r\n    time: '11:00',\r\n    name: 'Александр Сергеев',\r\n    url: 'https://robohash.org/4a615395b3224db9cb222e47f9eec93c?set=set4&bgset=&size=400x400',\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Команда 1, вас понял.',\r\n    time: '11:50',\r\n    name: 'Савелий Назаров',\r\n    url: 'https://robohash.org/af3a18b116b7e6235c34874c63ef2a99?set=set4&bgset=&size=400x400',\r\n  },\r\n  {\r\n    id: 4,\r\n    text: 'Команда 2, вас понял',\r\n    time: '11:51',\r\n    name: 'Иван Тихонов',\r\n    url: 'https://robohash.org/bce72c1b89f2d2ec4f679d9eeb2c9b3b?set=set4&bgset=&size=400x400',\r\n  },\r\n  {\r\n    id: 5,\r\n    text: 'Команда 3, вас понял',\r\n    time: '11:52',\r\n    name: 'Юлия Соколова',\r\n    url: 'https://avatars.dicebear.com/v2/female/bce72c1b89f2d2ec4f679d9eeb2c9b3b.svg',\r\n  },\r\n  {\r\n    id: 6,\r\n    text: 'Команда 4, вас понял',\r\n    time: '11:54',\r\n    name: 'Михаил Баженов',\r\n    url: 'https://gravatar.com/avatar/bce72c1b89f2d2ec4f679d9eeb2c9b3b?s=400&d=robohash&r=x',\r\n  },\r\n  {\r\n    id: 7,\r\n    text: 'Команда 5, вас понял',\r\n    time: '11:55',\r\n    name: 'Анна Ильина',\r\n    url: 'https://robohash.org/c29ba1ceea46bef952dc8c38c50a3ee1?set=set4&bgset=&size=400x400',\r\n  },\r\n  {\r\n    id: 8,\r\n    text: 'Команда 6, вас понял',\r\n    time: '11:56',\r\n    name: 'Полина Горшкова',\r\n    url: 'https://robohash.org/772ee4f7922e75ab70c4a5dc273b9187?set=set4&bgset=&size=400x400',\r\n  },\r\n  {\r\n    id: 9,\r\n    text: 'Команда 7, вас понял',\r\n    time: '11:58',\r\n    name: 'Елена Боброва',\r\n    url: 'https://avatars.dicebear.com/v2/female/772ee4f7922e75ab70c4a5dc273b9187.svg',\r\n  },\r\n  {\r\n    id: 10,\r\n    text: 'Такс №15226 сделать макет официального сайта более удобыным для пользывателей и сделать загрузку сайта в два раза быстрее.',\r\n    time: '12:00',\r\n    name: 'Фёдор Раков',\r\n    url: 'https://gravatar.com/avatar/ba35c0fbb904d84d2602e54faa316406?s=400&d=robohash&r=x',\r\n  },\r\n  {\r\n    id: 11,\r\n    text: 'Принято',\r\n    time: '12:05',\r\n    name: 'Александр Жуков',\r\n    url: 'https://gravatar.com/avatar/9ca0fc4bce9569ab268225e1aa91d102?s=400&d=robohash&r=x',\r\n  },\r\n  {\r\n    id: 12,\r\n    text: 'Принято',\r\n    time: '12:10',\r\n    name: 'Константин Павловский',\r\n    url: 'https://gravatar.com/avatar/315721415a8b6678644a0b7dc158d51b?s=400&d=robohash&r=x',\r\n  },\r\n  {\r\n    id: 13,\r\n    text: 'Следующяя зум встреча завтра вечеров в 7 часов.',\r\n    time: '13:30',\r\n    name: 'Марк Жуков',\r\n    url: 'https://gravatar.com/avatar/cdb129cad8543ba85b7fd4a12dc960c8?s=400&d=robohash&r=x',\r\n  },\r\n  {\r\n    id: 14,\r\n    text: 'Провели встречу с потенциальными работниками на фрон енд, передаю его в тех отдел',\r\n    time: '14:00',\r\n    name: 'Лев Архипов',\r\n    url: 'https://avatars.dicebear.com/v2/male/3e7a025019931a8dc28c175de9a0ad05.svg',\r\n  },\r\n  {\r\n    id: 15,\r\n    text: 'Принято. Буду собеседовать по азам JS и React.',\r\n    time: '14:30',\r\n    name: 'Алиса Зимина',\r\n    url: 'https://avatars.dicebear.com/v2/gridy/3e7a025019931a8dc28c175de9a0ad05.svg',\r\n  },\r\n  {\r\n    id: 16,\r\n    text: 'Коллеги, у нас в таблице данные не совпадают. Нужно срочно всем проверить свои отправленные данные',\r\n    time: '15:00',\r\n    name: 'Ксения Морозова',\r\n    url: '',\r\n  },\r\n  {\r\n    id: 17,\r\n    text: 'Таск №1578993 тестировка нового приложения завершена. Передаю для баг фиксинга.',\r\n    time: '15:30',\r\n    name: 'Ева Крылова',\r\n    url: 'https://avatars.dicebear.com/v2/gridy/b1eba6cf7f3f505f82d798f760f352b1.svg',\r\n  },\r\n  {\r\n    id: 17,\r\n    text: 'Таск №45769 дизайн для нового продукта сделано.',\r\n    time: '15:35',\r\n    name: 'Ульяна Ткачева',\r\n    url: 'https://avatars.dicebear.com/v2/gridy/f8acab1f91777e01376bcc42d5f9be97.svg',\r\n  },\r\n  {\r\n    id: 19,\r\n    text: 'Принято, сегодня решу все баги.',\r\n    time: '15:50',\r\n    name: 'Полина Зайцева',\r\n    url: 'https://avatars.dicebear.com/v2/gridy/8059fead71d85be60bd69597a44f2a1e.svg',\r\n  },\r\n  {\r\n    id: 20,\r\n    text: 'Отпраляю запрос на продление сроков проверки нашего отдела.',\r\n    time: '15:55',\r\n    name: 'Дарья Сорокина',\r\n    url: 'https://avatars.dicebear.com/v2/avataaars/af091457a6d71143f070f4c059740c10.svg',\r\n  },\r\n  {\r\n    id: 21,\r\n    text: 'Принято. У вас еще 5 дней тогда',\r\n    time: '16:00',\r\n    name: 'Алисия Морозова',\r\n    url: 'https://avatars.dicebear.com/v2/avataaars/6e9a7a6f1126c69cbcf649a0ac44aa65.svg',\r\n  },\r\n  {\r\n    id: 22,\r\n    text: 'Маркетингые данные пришли, можно приступать к работе.',\r\n    time: '16:30',\r\n    name: 'Матвей Зиновьев',\r\n    url: 'https://avatars.dicebear.com/v2/avataaars/0f0af78d43c2ab106bba0ec932426ae7.svg',\r\n  },\r\n  {\r\n    id: 23,\r\n    text: 'Бухгалтерия получила подтверждение и сегодня всем отправятся бонусы.',\r\n    time: '17:00',\r\n    name: 'Полина Нестерова',\r\n    url: 'https://avatars.dicebear.com/v2/identicon/0f0af78d43c2ab106bba0ec932426ae7.svg',\r\n  },\r\n  {\r\n    id: 24,\r\n    text: 'Благодарю! ',\r\n    time: '17:01',\r\n    name: 'Фёдор Жуков',\r\n    url: 'https://avatars.dicebear.com/v2/avataaars/5343a8b5c2dd753b8fee960c6dcd9ad8.svg',\r\n  },\r\n  {\r\n    id: 15,\r\n    text: 'Сегодня к нам присоединяется новый член команды. Добро пожаловать!',\r\n    time: '17:05',\r\n    name: 'Василий Иванович',\r\n    url: 'http://www.metalinfo.ru/ru/news/113017_big.jpg',\r\n  },\r\n]\r\n","import React, { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { MessageItem } from '../../../components/Message/MessageItem';\r\nimport { ProfileInfoType } from '../../ProfilePage/profilePageReducer';\r\nimport { workChatData } from '../data';\r\nimport s from './TalkChat.module.css'\r\nimport { MessageType } from '../WorkChat/workChatReducer';\r\nimport { sendMessageTalk } from './talkChatReducer';\r\n\r\ntype TalkChattPropsType = {\r\n    userTalkChat: MessageType[]\r\n    userId: number\r\n    user: ProfileInfoType\r\n}\r\n\r\nexport const TalkChat: React.FC<TalkChattPropsType> = ({ userTalkChat, userId, user }) => {\r\n    const dispatch = useDispatch()\r\n    const scroll = useRef(null)\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        scroll.current.scrollIntoView({ behavior: 'smooth' })\r\n    }, [userTalkChat]);\r\n    const onClickHandler = (title: string) => {\r\n        dispatch(sendMessageTalk(userId, title))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.content}>\r\n                {workChatData.map(m => {\r\n                    return <MessageItem\r\n                        key={m.id}\r\n                        message={m.text}\r\n                        name={m.name}\r\n                        time={m.time}\r\n                        userPhoto={m.url}\r\n                        userId={userId}\r\n                        messageId={m.id}\r\n                    />\r\n\r\n                })}\r\n                {userTalkChat?.map(m => {\r\n                    return <MessageItem\r\n                        key={m.id}\r\n                        message={m.text}\r\n                        name={user.firstName + \" \" + user.lastName}\r\n                        time={m.time}\r\n                        userPhoto={user.imgUrl}\r\n                        me={true}\r\n                        editAble={true}\r\n                        userId={userId}\r\n                        messageId={m.id}\r\n                    />\r\n\r\n                })}\r\n\r\n                <div ref={scroll}></div>\r\n            </div>\r\n            <div className={s.footer}>\r\n\r\n                <AddItemForm\r\n                    addItem={onClickHandler}\r\n                    multiline={true}\r\n                    className={s.divWrapper}\r\n                    inputStyle={s.messageInput}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import IconButton from '@material-ui/core/IconButton';\r\nimport { SendRounded } from '@material-ui/icons';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { MessageItem } from '../../../components/Message/MessageItem';\r\nimport { ProfileInfoType } from '../../ProfilePage/profilePageReducer';\r\nimport { workChatData } from '../data';\r\nimport s from './WorkChat.module.css'\r\nimport { MessageType, sendMessageWork } from './workChatReducer';\r\n\r\ntype WorkChatPropsType = {\r\n    userWorkChat: MessageType[]\r\n    userId: number\r\n    user: ProfileInfoType\r\n}\r\n\r\nexport const WorkChat: React.FC<WorkChatPropsType> = ({ userWorkChat, userId, user }) => {\r\n    const dispatch = useDispatch()\r\n    const scroll = useRef(null)\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        scroll.current.scrollIntoView({ behavior: 'smooth' })\r\n    }, [userWorkChat]);\r\n    const onClickHandler = (title: string) => {\r\n        dispatch(sendMessageWork(userId, title))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.content}>\r\n                {workChatData.map(m => {\r\n                    return <MessageItem\r\n                        key={m.id}\r\n                        message={m.text}\r\n                        name={m.name}\r\n                        time={m.time}\r\n                        userPhoto={m.url}\r\n                        userId={userId}\r\n                        messageId={m.id}\r\n                    />\r\n\r\n                })}\r\n                {userWorkChat?.map(m => {\r\n                    return <MessageItem\r\n                        key={m.id}\r\n                        message={m.text}\r\n                        name={user.firstName + \" \" + user.lastName}\r\n                        time={m.time}\r\n                        userPhoto={user.imgUrl}\r\n                        me={true}\r\n                        userId={userId}\r\n                        messageId={m.id}\r\n                    />\r\n\r\n                })}\r\n\r\n                <div ref={scroll}></div>\r\n            </div>\r\n            <div className={s.footer}>\r\n\r\n                <AddItemForm\r\n                    addItem={onClickHandler}\r\n                    multiline={true}\r\n                    className={s.divWrapper}\r\n                    inputStyle={s.messageInput}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { ProfileInfoType } from '../ProfilePage/profilePageReducer';\r\nimport s from './Chats.module.css'\r\nimport { TalkChat } from './TalkChat/TalkChat';\r\nimport { WorkChat } from './WorkChat/WorkChat';\r\nimport { MessageType } from './WorkChat/workChatReducer';\r\n\r\ntype ChatsPropsType = {\r\n    userWorkChat: MessageType[]\r\n    userId: number\r\n    user: ProfileInfoType\r\n    userTalkChat: MessageType[]\r\n}\r\n\r\nexport const Chats: React.FC<ChatsPropsType> = ({ userWorkChat, userId, user, userTalkChat }) => {\r\n    const [editMode, setEditMode] = useState(true)\r\n\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.header}>\r\n                <div className={s.chatBtn} onClick={() => setEditMode(true)}>\r\n                    {editMode ? <b className={s.choosedBtn}>  Рабочий чат </b> : \"Рабочий чат\"}\r\n                </div>\r\n                <div className={s.chatBtn} onClick={() => setEditMode(false)}>\r\n                    {!editMode ? <b className={s.choosedBtn}>  Общение </b> : \"Общение\"}\r\n                </div>\r\n            </div>\r\n            {\r\n                editMode ? <WorkChat\r\n                    userWorkChat={userWorkChat}\r\n                    userId={userId}\r\n                    user={user}\r\n                /> : <TalkChat\r\n                    userTalkChat={userTalkChat}\r\n                    userId={userId}\r\n                    user={user}\r\n                />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { UsersNotesType } from '../../features/Notes/notesReducer';\r\nimport { ProfilePage } from '../../features/ProfilePage/ProfilePage';\r\nimport { UsersProfileType } from '../../features/ProfilePage/profilePageReducer';\r\nimport { Chats } from '../../features/Chats/Chats';\r\nimport { AppStateType } from '../store';\r\nimport s from './Main.module.css'\r\nimport { WorkChatStateType } from '../../features/Chats/WorkChat/workChatReducer';\r\n\r\n\r\n\r\nexport const Main = () => {\r\n    const userId = useSelector<AppStateType, number>(state => state.login.loggedId)\r\n    const users = useSelector<AppStateType, UsersProfileType>(state => state.profile)\r\n    const usersNotes = useSelector<AppStateType, UsersNotesType>(state => state.notes)\r\n    const userWorkChats = useSelector<AppStateType, WorkChatStateType>(state => state.workChat)\r\n    const userTalkChats = useSelector<AppStateType, WorkChatStateType>(state => state.talkChat)\r\n    const user = users[userId].profileInfo\r\n    const userNote = usersNotes[userId]\r\n    const userWorkChat = userWorkChats[userId]\r\n    const userTalkChat = userTalkChats[userId]\r\n    if (user) {\r\n        return (\r\n            <div className={s.wrapper}>\r\n                <div className={s.container}>\r\n                    <div className={s.profile}>\r\n                        <ProfilePage user={user} userNote={userNote} userId={userId} />\r\n                    </div>\r\n                    <div className={s.chats}>\r\n                        <Chats userWorkChat={userWorkChat} userId={userId} user={user} userTalkChat={userTalkChat}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <div>Что то  не так /\\\\^._.^//\\</div>\r\n    }\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppStateType } from '../../App/store'\r\nimport { setValidation } from '../../features/authorization/Login/loginReducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppStateType, string | null>(state => state.login.validation);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setValidation(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../../App/store';\r\nimport { LogIn } from './loginReducer';\r\nimport { PATH } from '../../../components/routes/Pages';\r\nimport s from './Login.module.css'\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport FormControl from '@material-ui/core/FormControl/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup/FormGroup';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport { ErrorSnackbar } from '../../../components/ErrorSnackbar/ErrorSnackbar';\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    type FormErrorType = {\r\n        email?: string\r\n        password?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters at least';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            let { email, password } = values;\r\n            formik.resetForm()\r\n            dispatch(LogIn(email, password))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.MAIN} />\r\n    }\r\n    return <div>\r\n        <ErrorSnackbar />\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <b>Planktonics messanger v1.0 </b>\r\n                    <p>специально для <b>TOT Systems</b></p>\r\n                    <p>Чтобы зарегистрироваться нажмите\r\n                        <NavLink to={PATH.REGISTER}><b> здесь</b></NavLink>\r\n                    </p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n\r\n                    {\r\n                        <div className={s.errorStyle}>\r\n                            {\r\n                                formik.touched.email && formik.errors.email\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n\r\n                    />\r\n                    {\r\n                        <div className={s.errorStyle}>\r\n                            {\r\n                                formik.touched.password && formik.errors.password\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../../App/store';\r\nimport { addUser, RegisteredUserType } from './registReducer';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport FormControl from '@material-ui/core/FormControl/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup/FormGroup';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport s from './Registration.module.css'\r\nimport { PATH } from '../../../components/routes/Pages';\r\n\r\nexport const Registration = (props: any) => {\r\n    const registeredUsers = useSelector<AppStateType, RegisteredUserType[]>(state => state.registration.registeredUsers)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const dispatch = useDispatch();\r\n\r\n    type FormErrorType = {\r\n        firstName?: string\r\n        lastName?: string\r\n        email?: string\r\n        password?: string\r\n        passwordCheck?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            passwordCheck: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            let checkEmail = registeredUsers.find(u => u.email === values.email)\r\n            if (!values.firstName) {\r\n                errors.firstName = 'Обязательное поле'\r\n            }\r\n            if (!values.lastName) {\r\n                errors.lastName = 'Обязательное поле'\r\n            }\r\n            if (!values.email) {\r\n                errors.email = 'Обязательное поле';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Не действительная эл.почта'\r\n            } else if (checkEmail !== undefined) {\r\n                errors.email = 'Эта эл.почта уже заригестрирована'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Обязательное поле';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Пароль должен состоять минимум из 7 символов';\r\n            }\r\n            if (values.password !== values.passwordCheck) {\r\n                errors.passwordCheck = 'Пароли не совпадают';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            let { firstName, lastName, email, password, } = values;\r\n            formik.resetForm()\r\n            console.log(values);\r\n            dispatch(addUser(firstName, lastName, email, password))\r\n            setEditMode(true)\r\n\r\n        },\r\n    })\r\n\r\n    if (editMode) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n    return <div >\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl >\r\n                <Button className={s.linkButton} variant={'contained'} >\r\n                    <NavLink to={PATH.LOGIN}>login</NavLink>\r\n                </Button>\r\n                <FormGroup>\r\n                    <TextField\r\n                        className={s.textField}\r\n                        label=\"Имя\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('firstName')}\r\n                    />\r\n                    {\r\n                        <div className={s.errorStyle}>\r\n                            {\r\n                                formik.touched.firstName && formik.errors.firstName\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <TextField\r\n                        label=\"Фамилия\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('lastName')}\r\n                    />\r\n                    {\r\n                        <div className={s.errorStyle}>\r\n                            {\r\n                                formik.touched.lastName && formik.errors.lastName\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <TextField\r\n                        label=\"Эл.почта\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {\r\n                        <div className={s.errorStyle}>\r\n                            {\r\n                                formik.touched.email && formik.errors.email\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"пароль\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n\r\n                    />\r\n                    {\r\n                        <div className={s.errorStyle}>\r\n                            {\r\n                                formik.touched.password && formik.errors.password\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"введите ещё раз пароль\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('passwordCheck')}\r\n\r\n                    />\r\n                    {\r\n                        <div className={s.errorStyle}>\r\n                            {\r\n                                formik.touched.passwordCheck && formik.errors.passwordCheck\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>зарегистрироваться</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n// <div>\r\n//         <form onSubmit={formik.handleSubmit}>\r\n\r\n//             <input\r\n//                 placeholder=\"Имя\"\r\n//                 {...formik.getFieldProps('firstName')}\r\n//             />\r\n//             {formik.touched.firstName &&\r\n//                 formik.errors.firstName ? <div style={{ color: 'red' }}>{formik.errors.firstName}</div> : null}\r\n//             <input\r\n//                 placeholder=\"Фамилия\"\r\n//                 {...formik.getFieldProps('lastName')}\r\n//             />\r\n//             {formik.touched.lastName &&\r\n//                 formik.errors.lastName ? <div style={{ color: 'red' }}>{formik.errors.lastName}</div> : null}\r\n\r\n//             <input\r\n//                 placeholder=\"Эл.почта\"\r\n//                 {...formik.getFieldProps('email')}\r\n//             />\r\n//             {formik.touched.email &&\r\n//                 formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n//             <input\r\n//                 type=\"password\"\r\n//                 placeholder=\"пароль\"\r\n//                 {...formik.getFieldProps('password')}\r\n//             />\r\n//             {formik.touched.password &&\r\n//                 formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n//             <input\r\n//                 type=\"password\"\r\n//                 placeholder=\"введите ещё раз пароль\"\r\n//                 {...formik.getFieldProps('passwordCheck')}\r\n//             />\r\n//             {formik.touched.passwordCheck &&\r\n//                 formik.errors.passwordCheck ? <div style={{ color: 'red' }}>{formik.errors.passwordCheck}</div> : null}\r\n//             <button type={'submit'}>Заригестрироваться</button>\r\n//         </form>\r\n//     </div>","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport s from './EditProfileInfo.module.css'\r\nimport Button from '@material-ui/core/Button'\r\nimport { RegisteredUserType } from '../../authorization/Registration/registReducer'\r\nimport { AppStateType } from '../../../App/store'\r\nimport { setEditModeProfile, updateUserProfile, UsersProfileType } from '../profilePageReducer'\r\nimport { useFormik } from 'formik'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport userPng from '../../../assets/user.png'\r\nimport { PATH } from '../../../components/routes/Pages'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype EditProfileInfoPropsType = {\r\n\r\n}\r\nexport const EditProfileInfo: React.FC<EditProfileInfoPropsType> = () => {\r\n    const id = useSelector<AppStateType, number>(state => state.login.loggedId)\r\n    const users = useSelector<AppStateType, UsersProfileType>(state => state.profile)\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => dispatch(setEditModeProfile(false))\r\n    const user = users[id]\r\n    const email = user.profileInfo.email\r\n    const editMode = useSelector<AppStateType, boolean>(state => state.profile.editMode)\r\n    const [url, setUrl] = useState('');\r\n    useEffect(() => {\r\n        // @ts-ignore\r\n        setUrl(localStorage.getItem('recent-image'));\r\n    }, [localStorage.getItem('recent-image')])\r\n\r\n    // ------------> formik <-----------------//\r\n    type FormErrorType = {\r\n        firstName?: string\r\n        lastName?: string\r\n        status?: string\r\n\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: user.profileInfo.firstName,\r\n            lastName: user.profileInfo.lastName,\r\n            status: user.profileInfo.status\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            if (!values.firstName) {\r\n                errors.firstName = 'Обязательное поле'\r\n            }\r\n            if (!values.lastName) {\r\n                errors.lastName = 'Обязательное поле'\r\n            }\r\n            if (values.status.length > 50) {\r\n                errors.status = 'Не больше 50 символов'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            let { firstName, lastName, status } = values\r\n            let payload = {\r\n                id,\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                status,\r\n                imgUrl: url\r\n            }\r\n            dispatch(updateUserProfile(payload))\r\n            dispatch(setEditModeProfile(false))\r\n        },\r\n    })\r\n    if (!editMode) {\r\n        return <Redirect to={PATH.MAIN} />\r\n    }\r\n    if (user) {\r\n        const uploader = (file: any) => {\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () => {\r\n                //@ts-ignore\r\n                localStorage.setItem('recent-image', reader.result)\r\n            })\r\n            reader.readAsDataURL(file);\r\n        }\r\n        const userImg = user.profileInfo.imgUrl ? user.profileInfo.imgUrl : userPng\r\n        return (\r\n            <div className={s.wrapper}>\r\n                <div className={s.userPhotoBlock}>\r\n                    <img className={s.userPhoto} src={userImg} />\r\n                    <input\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={e => {\r\n                            if (!e.target.files) return\r\n                            uploader(e.target.files[0])\r\n                        }}\r\n                        name=\"fileInput\"\r\n                    />\r\n                </div>\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Имя\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('firstName')}\r\n                            />\r\n                            {\r\n                                <div className={s.errorStyle}>\r\n                                    {\r\n                                        formik.touched.firstName && formik.errors.firstName\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            <TextField\r\n                                label=\"Фамилия\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('lastName')}\r\n                            />\r\n                            {\r\n                                <div className={s.errorStyle}>\r\n                                    {\r\n                                        formik.touched.lastName && formik.errors.lastName\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            <TextField\r\n                                label=\"Статус\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('status')}\r\n                            />\r\n                            {\r\n                                <div className={s.errorStyle}>\r\n                                    {\r\n                                        formik.touched.status && formik.errors.status\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            <div className={s.buttons}>\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>сохранить</Button>\r\n                            </div>\r\n\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n                <div className={s.buttons}>\r\n                    <Button type={'submit'} color={'primary'} onClick={onClickHandler}>отменить</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { DetailedHTMLProps, HTMLAttributes } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../../App/store'\r\nimport { PATH } from '../routes/Pages'\r\n\r\ntype DivPropsType = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\r\n\r\ntype AuthRedirectPropsType = DivPropsType & {}\r\n\r\nexport const AuthRedirect: React.FC<AuthRedirectPropsType> = React.memo(({\r\n    children,\r\n    ...restProps\r\n}) => {\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN} />\r\n    }\r\n    return (\r\n        <>\r\n            <div {...restProps}>\r\n                {children}\r\n            </div>\r\n        </>\r\n    )\r\n})","import React, { ReactNode } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Main } from \"../../App/Main/Main\";\nimport { Login } from \"../../features/authorization/Login/Login\";\nimport { Registration } from \"../../features/authorization/Registration/Registration\";\nimport { EditProfileInfo } from \"../../features/ProfilePage/EditProfileInfo/EditProfileInfo\";\nimport { ProfilePage } from \"../../features/ProfilePage/ProfilePage\";\nimport { Chats } from \"../../features/Chats/Chats\";\nimport { AuthRedirect } from \"../Redirect/AuthRedirect\";\n\n\nexport type PageType = {\n    _id: number;\n    title: string;\n    path?: string;\n    params?: string;\n    exact?: boolean;\n    page: ReactNode;\n};\n\nexport const PATH = {\n    LOGIN: \"/login\",\n    REGISTER: \"/register\",\n    MAIN: \"/\",\n    EDIT_PROFILE: \"/editProfile\",\n};\n\nexport const pages: PageType[] = [\n    {\n        _id: 0, title: \"main\", path: \"/\", exact: true,\n        page: <AuthRedirect> <Main /> </AuthRedirect>\n    },\n    { _id: 1, title: \"login\", path: PATH.LOGIN, exact: true, page: <Login /> },\n    { _id: 2, title: \"register\", path: PATH.REGISTER, exact: true, page: <Registration /> },\n    { _id: 3, title: \"editProfile\", path: PATH.EDIT_PROFILE, exact: true, page: <EditProfileInfo /> },\n    { _id: 777, title: \"error404\", page: <div>error404</div> }\n];\n","import React from \"react\";\nimport {NavLink, NavLinkProps} from \"react-router-dom\";\nimport s from \"./PageLinks.module.css\";\n\nexport type PageLinksPropsType = NavLinkProps & { info?: string };\n\nexport const PageLinks: React.FC<PageLinksPropsType> = React.memo((\n    {\n        info,\n        ...props\n    }\n) => {\n\n    return <NavLink className={s.link} {...props}/>;\n});\n\n","import Container from \"@material-ui/core/Container\";\nimport React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { PageType, pages } from \"./Pages\";\n\nconst mappedRoutes = pages.map((p: PageType) => (\n    <Route\n        key={\"route-\" + p._id}\n        path={p.path && (p.path + (p.params || \"\"))}\n        exact={p.exact}\n        render={() => p.page}\n    />\n));\n\nconst Routes = () => {\n\n    return (\n            <Switch>\n                {mappedRoutes}\n            </Switch>\n    );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport { pages } from \"../routes/Pages\";\nimport  { PageLinks } from \"../PageLinks/PageLinks\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppStateType } from \"../../App/store\";\nimport { logOut } from \"../../features/authorization/Login/loginReducer\";\n\nconst mappedLinks = pages.map(p => (\n    <PageLinks\n        key={\"navLink-\" + p._id}\n        to={(p.path || \"/error404\") + (p.params ? \"/1\" : \"\")}\n        info={\"navLink-\" + p._id}\n    >\n        {p.title}\n    </PageLinks>\n));\n\nconst DevHeader = () => {\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.login.isLoggedIn)\n    const dispatch = useDispatch()\n    const onClickHandler = () => {\n        dispatch(logOut())\n    }\n    return (\n        <div>\n            {mappedLinks}\n            {isLoggedIn&& <button onClick={onClickHandler}>Logout</button>}\n        </div>\n    );\n};\n\nexport default DevHeader;\n","import React from 'react';\nimport './App.css';\nimport DevHeader from '../components/dev-header/DevHeader';\nimport { DEV_VERSION } from '../config';\nimport Routes from '../components/routes/Routes';\nimport { Helmet } from \"react-helmet\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Planktonics v1.0</title>\n        <link rel=\"canonical\" href=\"https://hj-abzal.github.io/TOT-Systems-network\" />\n        <meta name=\"description\" content=\"Planktonics v1.0 messenger app\" />\n      </Helmet>\n      {DEV_VERSION && <DevHeader />}\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","export const DEV_VERSION = false\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n  registReducer,\r\n  RegistReducerActionTypes,\r\n} from './../features/authorization/Registration/registReducer'\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { loadState, saveState } from '../utils/localStorage'\r\nimport { loginReducer } from '../features/authorization/Login/loginReducer'\r\nimport { profilePageReducer } from '../features/ProfilePage/profilePageReducer'\r\nimport { notesReducer } from '../features/Notes/notesReducer'\r\nimport { workChatReducer } from '../features/Chats/WorkChat/workChatReducer'\r\nimport { talkChatReducer } from '../features/Chats/TalkChat/talkChatReducer'\r\n\r\nlet rootReducer = combineReducers({\r\n  login: loginReducer,\r\n  registration: registReducer,\r\n  profile: profilePageReducer,\r\n  notes: notesReducer,\r\n  workChat: workChatReducer,\r\n  talkChat: talkChatReducer\r\n})\r\n\r\nexport type StoreType = typeof store\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type GetAppStateType = () => AppStateType\r\n\r\nexport type AppActionsType = RegistReducerActionTypes\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  AppStateType,\r\n  unknown,\r\n  AppActionsType\r\n>\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(\r\n  rootReducer,\r\n  loadState(),\r\n  composeEnhancers(applyMiddleware(thunk))\r\n)\r\n\r\nstore.subscribe(() => {\r\n  saveState({\r\n    login: store.getState().login,\r\n    registration: store.getState().registration,\r\n    profile: store.getState().profile,\r\n    notes: store.getState().notes,\r\n    workChat: store.getState().workChat,\r\n    talkChat: store.getState().talkChat\r\n  })\r\n})\r\n","import { AppStateType } from './../App/store';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('app-state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('app-state', serializedState)\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './App/store';\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageItem_message__1KlVz\",\"myMessage\":\"MessageItem_myMessage__conMq\",\"avatar\":\"MessageItem_avatar__1B6r4\",\"angle\":\"MessageItem_angle__1i7qh\",\"item\":\"MessageItem_item__1KNgq\",\"name\":\"MessageItem_name__1W-Th\",\"text\":\"MessageItem_text__103r5\",\"time\":\"MessageItem_time__agIlL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EditProfileInfo_wrapper__37Iot\",\"userPhotoBlock\":\"EditProfileInfo_userPhotoBlock__3JdYg\",\"userPhoto\":\"EditProfileInfo_userPhoto__3KbaE\",\"errorStyle\":\"EditProfileInfo_errorStyle__3uKcf\",\"buttons\":\"EditProfileInfo_buttons__j8Dcj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorStyle\":\"Registration_errorStyle__22zQl\",\"linkButton\":\"Registration_linkButton__1uK3q\",\"textField\":\"Registration_textField__28-88\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Chats_wrapper__1Q8-v\",\"header\":\"Chats_header__7A9cj\",\"chatBtn\":\"Chats_chatBtn__3WJy6\",\"choosedBtn\":\"Chats_choosedBtn__1iuMG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__jklBp\",\"user\":\"ProfileInfo_user__2kK7r\",\"userPhoto\":\"ProfileInfo_userPhoto__1iLgq\",\"profileInfo\":\"ProfileInfo_profileInfo__21WYX\",\"userName\":\"ProfileInfo_userName__2gN_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserNote_container__2kSzX\",\"item\":\"UserNote_item__tr2AJ\",\"text\":\"UserNote_text__mQl72\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TalkChat_wrapper__6outt\",\"content\":\"TalkChat_content__2YjHD\",\"divWrapper\":\"TalkChat_divWrapper__Vg-J9\",\"messageInput\":\"TalkChat_messageInput__fFFMk\",\"footer\":\"TalkChat_footer__25OY6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"WorkChat_wrapper__3emEc\",\"content\":\"WorkChat_content__2Zxi7\",\"divWrapper\":\"WorkChat_divWrapper__fna9Q\",\"messageInput\":\"WorkChat_messageInput__2W61G\",\"footer\":\"WorkChat_footer__3HLTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UserNotes_wrapper__tbh5c\",\"inputStyle\":\"UserNotes_inputStyle__xlPfA\",\"title\":\"UserNotes_title__3_Q2d\",\"noteItems\":\"UserNotes_noteItems__3a6Ys\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Main_wrapper__ZCSTx\",\"container\":\"Main_container__2IyLG\",\"profile\":\"Main_profile__wTPLk\",\"chats\":\"Main_chats___3Ow6\"};"],"sourceRoot":""}
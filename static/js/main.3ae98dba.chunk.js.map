{"version":3,"sources":["components/PageLinks/PageLinks.module.css","features/authorization/Login/loginReducer.ts","features/authorization/Login/Login.tsx","features/authorization/Registration/registReducer.ts","features/authorization/Registration/Registration.tsx","components/routes/Pages.tsx","components/PageLinks/PageLinks.tsx","components/dev-header/DevHeader.tsx","components/routes/Routes.tsx","App/App.tsx","reportWebVitals.ts","App/store.ts","utils/localStorage.ts","index.tsx"],"names":["module","exports","initialState","isLoggedIn","loggedId","validation","loginReducerActions","SET_IS_LOGGED_IN","SET_LOGIN_VALIDATION","LogIn","email","password","dispatch","getState","id","value","user","registration","registeredUsers","find","u","undefined","type","Login","useSelector","state","login","loginValidation","useDispatch","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","alert","handleSubmit","placeholder","getFieldProps","touched","style","color","registReducerActions","ADD_REGISTERED_USER","Registration","props","useState","editMode","setEditMode","firstName","lastName","passwordCheck","checkEmail","console","log","payload","Date","now","addRegisteredUser","to","PATH","pages","_id","title","path","exact","page","PageLinks","React","memo","info","className","s","link","mappedLinks","map","p","params","DevHeader","mappedRoutes","render","Routes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ae98dba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"PageLinks_link__2aEvz\"};","import { GetAppStateType } from './../../../App/store'\r\nimport { Dispatch } from 'redux'\r\nimport { act } from 'react-dom/test-utils'\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  loggedId: 0,\r\n  validation: '',\r\n}\r\n\r\nexport const loginReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: LoginReducerActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case loginReducerActions.SET_IS_LOGGED_IN:\r\n      return {\r\n        ...state,\r\n        loggedId: action.id,\r\n        isLoggedIn: action.value,\r\n      }\r\n    case loginReducerActions.SET_LOGIN_VALIDATION:\r\n      return {\r\n        ...state,\r\n        validation: action.validation,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst loginReducerActions = {\r\n  SET_IS_LOGGED_IN: 'login/SET_IS_LOGGED_IN',\r\n  SET_LOGIN_VALIDATION: 'login/SET_LOGIN_VALIDATION',\r\n} as const\r\n\r\nexport const setIsLoggedIn = (id: number, value: boolean) =>\r\n  ({ type: loginReducerActions.SET_IS_LOGGED_IN, id, value } as const)\r\n\r\nexport const setValidation = (validation: string) =>\r\n  ({ type: loginReducerActions.SET_LOGIN_VALIDATION, validation } as const)\r\n//thunks\r\n\r\nexport const LogIn =\r\n  (email: string, password: string) =>\r\n  (dispatch: Dispatch<LoginReducerActionTypes>, getState: GetAppStateType) => {\r\n    const registeredUsers = getState().registration.registeredUsers\r\n    let user = registeredUsers.find(\r\n      u => u.email === email && u.password === password\r\n    )\r\n    if (user !== undefined) {\r\n      dispatch(setIsLoggedIn(user.id, true))\r\n    } else {\r\n      dispatch(setValidation('Не правильный адрес почты или пароль'))\r\n    }\r\n  }\r\n\r\n// types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type LoginReducerActionTypes =\r\n  | ReturnType<typeof setIsLoggedIn>\r\n  | ReturnType<typeof setValidation>\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../../App/store';\r\nimport { LogIn } from './loginReducer';\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.login.isLoggedIn)\r\n    const loginValidation = useSelector<AppStateType, string>(state => state.login.validation)\r\n    const dispatch = useDispatch();\r\n\r\n    type FormErrorType = {\r\n        email?: string\r\n        password?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters at least';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            let { email, password } = values;\r\n            formik.resetForm()\r\n            alert(values)\r\n            dispatch(LogIn(email, password))\r\n        },\r\n    })\r\n\r\n    // if (isLoggedIn) {\r\n    //     return <Redirect to={'/'} />\r\n    // }\r\n    return <div>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <input\r\n                placeholder=\"Email\"\r\n                {...formik.getFieldProps('email')}\r\n            />\r\n            {formik.touched.email &&\r\n                formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                {...formik.getFieldProps('password')}\r\n\r\n            />\r\n            {formik.touched.password &&\r\n                formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n\r\n            <button type={'submit'}>Login</button>\r\n            {\r\n                loginValidation && <div style={{ color: 'red' }}>\r\n                    {loginValidation}\r\n                </div>\r\n            }\r\n        </form>\r\n    </div>\r\n}\r\n","import { Dispatch } from 'redux'\r\n\r\nconst initialState = {\r\n  registeredUsers: [] as RegisteredUserType[],\r\n}\r\n\r\nexport const registReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: RegistReducerActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case registReducerActions.ADD_REGISTERED_USER:\r\n      return {\r\n        ...state,\r\n        registeredUsers: [...state.registeredUsers, action.payload],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nconst registReducerActions = {\r\n  ADD_REGISTERED_USER: 'reg/ADD_REGISTERED_USER',\r\n} as const\r\n\r\nexport const addRegisteredUser = (\r\n  firstName: string,\r\n  lastName: string,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  let payload = {\r\n    id: Date.now(),\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    password,\r\n  }\r\n  return { type: registReducerActions.ADD_REGISTERED_USER, payload } as const\r\n}\r\n\r\n// types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type RegistReducerActionTypes = ReturnType<typeof addRegisteredUser>\r\n\r\nexport type RegisteredUserType = {\r\n  id: number\r\n  firstName: string\r\n  lastName: string\r\n  email: string\r\n  password: string\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../../App/store';\r\nimport { addRegisteredUser, RegisteredUserType } from './registReducer';\r\nimport { setValidation } from '../Login/loginReducer';\r\n\r\n\r\nexport const Registration = (props: any) => {\r\n    const registeredUsers = useSelector<AppStateType, RegisteredUserType[]>(state => state.registration.registeredUsers)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const dispatch = useDispatch();\r\n\r\n    type FormErrorType = {\r\n        firstName?: string\r\n        lastName?: string\r\n        email?: string\r\n        password?: string\r\n        passwordCheck?: string\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            passwordCheck: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            let checkEmail = registeredUsers.find(u => u.email === values.email)\r\n            if (!values.firstName) {\r\n                errors.firstName = 'Обязательное поле'\r\n            }\r\n            if (!values.lastName) {\r\n                errors.lastName = 'Обязательное поле'\r\n            }\r\n            if (!values.email) {\r\n                errors.email = 'Обязательное поле';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Не действительная эл.почта'\r\n            } else if (checkEmail !== undefined) {\r\n                errors.email = 'Эта эл.почта уже заригестрирована'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Обязательное поле';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Пароль должен состоять минимум из 7 символов';\r\n            }\r\n            if (values.password !== values.passwordCheck) {\r\n                errors.passwordCheck = 'Пароли не совпадают';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            let { firstName, lastName, email, password, } = values;\r\n            formik.resetForm()\r\n            console.log(values);\r\n            dispatch(addRegisteredUser(firstName, lastName, email, password))\r\n            setEditMode(true)\r\n\r\n        },\r\n    })\r\n\r\n    if (editMode) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n    return <div>\r\n        <form onSubmit={formik.handleSubmit}>\r\n\r\n            <input\r\n                placeholder=\"Имя\"\r\n                {...formik.getFieldProps('firstName')}\r\n            />\r\n            {formik.touched.firstName &&\r\n                formik.errors.firstName ? <div style={{ color: 'red' }}>{formik.errors.firstName}</div> : null}\r\n            <input\r\n                placeholder=\"Фамилия\"\r\n                {...formik.getFieldProps('lastName')}\r\n            />\r\n            {formik.touched.lastName &&\r\n                formik.errors.lastName ? <div style={{ color: 'red' }}>{formik.errors.lastName}</div> : null}\r\n\r\n            <input\r\n                placeholder=\"Эл.почта\"\r\n                {...formik.getFieldProps('email')}\r\n            />\r\n            {formik.touched.email &&\r\n                formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"пароль\"\r\n                {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.touched.password &&\r\n                formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"введите ещё раз пароль\"\r\n                {...formik.getFieldProps('passwordCheck')}\r\n            />\r\n            {formik.touched.passwordCheck &&\r\n                formik.errors.passwordCheck ? <div style={{ color: 'red' }}>{formik.errors.passwordCheck}</div> : null}\r\n            <button type={'submit'}>Заригестрироваться</button>\r\n        </form>\r\n    </div>\r\n}\r\n","import React, {ReactNode} from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Login } from \"../../features/authorization/Login/Login\";\nimport { Registration } from \"../../features/authorization/Registration/Registration\";\n\n// import LearnPage from \"../../../../cnf-2-fatures/f-3-learn/l-1-ui/LearnPage\";\n// import TestPage from \"../../../../cnf-2-fatures/f-4-file/f-1-ui/TestPage\";\n\nexport type PageType = {\n    _id: number;\n    title: string;\n    path?: string;\n    params?: string;\n    exact?: boolean;\n    page: ReactNode;\n};\n\nexport const PATH = {\n    LOGIN: \"/login\",\n    REGISTER: \"/register\",\n    PROFILE: \"/profile\",\n};\n\nexport const pages: PageType[] = [\n    {_id: 0, title: \"main\", path: \"/\", exact: true, page: <Redirect to={PATH.LOGIN}/>},\n    {_id: 1, title: \"login\", path: PATH.LOGIN, exact: true, page: <Login/>},\n    {_id: 2, title: \"register\", path: PATH.REGISTER, exact: true, page: <Registration/>},\n    // {\n    //     _id: 7, title: \"profile\", path: PATH.PROFILE, exact: true,\n    //     page: <AuthRedirectPage><ProfilePage/></AuthRedirectPage>\n    // },\n    {_id: 9999, title: \"error404\", page: <div>error404</div>}\n];\n","import React from \"react\";\nimport {NavLink, NavLinkProps} from \"react-router-dom\";\nimport s from \"./PageLinks.module.css\";\n\nexport type PageLinksPropsType = NavLinkProps & { info?: string };\n\nexport const PageLinks: React.FC<PageLinksPropsType> = React.memo((\n    {\n        info,\n        ...props\n    }\n) => {\n\n    return <NavLink className={s.link} {...props}/>;\n});\n\n","import React from \"react\";\nimport { pages } from \"../routes/Pages\";\nimport  { PageLinks } from \"../PageLinks/PageLinks\";\n\nconst mappedLinks = pages.map(p => (\n    <PageLinks\n        key={\"navLink-\" + p._id}\n        to={(p.path || \"/error404\") + (p.params ? \"/1\" : \"\")}\n        info={\"navLink-\" + p._id}\n    >\n        {p.title}\n    </PageLinks>\n));\n\nconst DevHeader = () => {\n    return (\n        <>\n            {mappedLinks}\n        </>\n    );\n};\n\nexport default DevHeader;\n","import React from \"react\";\nimport {Switch, Route} from \"react-router-dom\";\nimport {PageType, pages} from \"./Pages\";\n\nconst mappedRoutes = pages.map((p: PageType) => (\n    <Route\n        key={\"route-\" + p._id}\n        path={p.path && (p.path + (p.params || \"\"))}\n        exact={p.exact}\n        render={() => p.page}\n    />\n));\n\nconst Routes = () => {\n\n    return (\n        <Switch>\n            {mappedRoutes}\n        </Switch>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Login } from '../features/authorization/Login/Login';\nimport { Registration } from '../features/authorization/Registration/Registration';\nimport DevHeader from '../components/dev-header/DevHeader';\nimport { DEV_VERSION } from '../config';\nimport Routes from '../components/routes/Routes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {DEV_VERSION && <DevHeader />}\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { registReducer, RegistReducerActionTypes } from './../features/authorization/Registration/registReducer';\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport thunkMiddlewere, { ThunkAction } from 'redux-thunk'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { loadState, saveState } from '../utils/localStorage'\r\nimport { loginReducer } from '../features/authorization/Login/loginReducer';\r\n\r\nlet rootReducer = combineReducers({\r\n  login: loginReducer,\r\n  registration: registReducer,\r\n})\r\n\r\n\r\nexport type StoreType = typeof store\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type GetAppStateType = () => AppStateType\r\n\r\nexport type AppActionsType = RegistReducerActionTypes\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  AppStateType,\r\n  unknown,\r\n  AppActionsType\r\n>\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(\r\n  rootReducer,\r\n  loadState(),\r\n  composeEnhancers(applyMiddleware(thunk))\r\n)\r\n\r\nstore.subscribe(() => {\r\n  saveState({\r\n    login: store.getState().login,\r\n    registration: store.getState().registration\r\n  })\r\n})\r\n","import { AppStateType } from './../App/store';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('app-state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('app-state', serializedState)\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './App/store';\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}